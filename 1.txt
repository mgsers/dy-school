.checkbox-input-container {
    display: inline-block;
}
.checkbox-input-container * {
    box-size: content-box;
}
.checkbox-input-group:after {
    content: '';
    display: block;
    clear: both;
}
.checkbox-input-btn {
  float: left;
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: 6;
  display: inline-block;
    -webkit-transition: all 0.3s ease;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
}
.checkbox-input-btn:first-child {
    border-radius: 4px 0 0 4px;
    border-left: 1px solid #d9d9d9;
}
.checkbox-input-btn:last-child {
    border-radius: 0 4px 4px 0;
}
.checkbox-input-btn.checked {
    color: ee9;
    border-color:  ee9;
    box-shadow: -1px 0 0 0 ee9;
}
.checkbox-input-btn.checked:first-child {
    box-shadow: none;
}



Vue.component('checkbox-input-btn', {
  template: '<span class="checkbox-input-btn" @click="toggleChecked" :class="{ checked }">' +
    '{{ itemToUse[labelKey] }}' +
    '</span>',
  props: {
    item: {
      required: true
    },
    isChecked: {
      type: Boolean,
      required: true
    },
    labelKey: {
      type: String,
      required: true
    }
  },
  computed: {
    itemToUse() {
      var item = this.item;
      if ( typeof item !== 'object' ) {
        return { label: item };
      } else {
        return item;
      }
    }
  },
  data() {
    return {
      checked: false
    };
  },
  methods: {
    toggleChecked() {
      var item = this.item;
      this.checked = !this.checked;
      this.$emit('change', item, this.checked);
    }
  },
  created() {
    this.checked = this.isChecked;
  }
});
Vue.component('checkbox-input', {
  template: '<div class="checkbox-input-container">' +
    '<div class="checkbox-input-group">' +
    '<checkbox-input-btn v-for="item in items" ' +
    ':item="item" ' +
    ':label-key="labelKey" ' +
    ':is-checked="isChecked(item)" ' +
    '@change="updateChecked">' +
    '</checkbox-input-btn>' +
    '</div>' +
    '</div>',
  props: {
    /*
     * v-model: 选中项，数组
     * items: 所有用于选择的项，数组，既可以是直接量数组，也可以是对象数组
     * labelKey: 默认值为'label'。在使用对象数组作为items，且显示的属性不是label属性时，需要指定显示属性
     */
    value: {
      type: Array,
      required: true
    },
    items: {
      type: Array,
      required: true
    },
    labelKey: {
      type: String,
      default: 'label'
    }
  },
  methods: {
    isChecked(item) {
      var labelKey = this.labelKey;
      if ( typeof item !== 'object' ) {
        return this.value.indexOf(item) !== -1;
      } else {
        return this.value.some((checked) => checked[labelKey] === item[labelKey]);
      }
    },
    updateChecked(item, checked) {
      if ( checked ) {
        this.$emit('input', this.value.concat(item));
      } else {
        var index = this.value.indexOf(item);
        var newValue = this.value.slice(0);
        newValue.splice(index, 1);
        this.$emit('input', newValue);
      }
    }
  }
});



Vue.component('tag', {
  template: '<div class="tag-input-tag">' +
    '{{ tag }}' +
    '<span class="tag-input-tag-remove" @click="removeTag">&times;</span>' +
    '</div>',
  props: {
    tag: {
      type: String,
      required: true
    },
    index: {
      type: Number,
      required: true
    }
  },
  methods: {
    removeTag: function() {
      this.$emit('remove-tag', this.index);
    }
  }
});
Vue.component('tag-input', {
  template: '<div class="tag-input-container"' +
    'tabindex="-1"' +
    '@keyup.up="minusIndex"' +
    '@keyup.down="plusIndex"' +
    '@keyup.enter.prevent="select"' +
    '@keyup.delete="popTag"' +
    '@focus="onFocus">' +
    '<tag v-for="(tagItem, index) in tagsToShow"' +
    ':tag="tagItem"' +
    ':index="index"' +
    '@remove-tag="removeTag">' +
    '</tag>' +
    '<input type="text"' +
    'v-model="keyword"' +
    '@focus="onFocus"' +
    '@blur="stopHandleInput"' +
    'ref="input"' +
    ':style="\'width:\' + (keyword.length + 1) + \'em;\'"/>' +
    '<ul v-show="items.length && keyword && searching" class="search-result-container">' +
    '<li v-for="(item, index) in items"' +
    'class="search-result-item"' +
    '@click="selectItem(index)"' +
    ':class="{ highlight: currentIndex === index }">' +
    '{{ item[labelKey] }}' +
    '</li>' +
    '</ul>' +
    '<ul class="search-result-container" v-show="showNoResult()">' +
    '<li class="search-result-item text-danger">没有结果，请更换搜索关键词</li>' +
    '</ul>' +
    '</div>',
  props: {
    /*
     * v-model: 标签列表
     * getItems: 关键词变化时调用的函数，参数为关键词，返回Promise
     * labelKey: 用于显示的属性名
     */
    value: {
      type: Array,
      required: true
    },
    getItems: {
      type: Function,
      required: true
    },
    labelKey: {
      type: String,
      default: 'label'
    }
  },
  data: function() {
    return {
      items: [],
      currentIndex: 0,
      searching: false,
      requestApi: false,
      keyword: '',
      prevKeyword: ''
    };
  },
  computed: {
    itemAmount: function() {
      return this.items.length;
    },
    tagsToShow: function() {
      var labelKey = this.labelKey;
      return this.value.map(function(item) { return item[labelKey]; });
    }
  },
  watch: {
    keyword(v, oldV) {
      // 用于判断回删tag以及防止相同关键词调用接口
      this.prevKeyword = oldV;
      if ( !this.searching ) {
        this.prevKeyword = '';
      }
      if ( v ) {
        this.search();
      }
    }
  },
  methods: {
    inArray(item, arr) {
      return arr.indexOf(item) !== -1;
    },
    onFocus: function() {
      this.$refs.input.focus();
      if ( this.keyword ) {
        this.search();
      }
    },
    search: function() {
      this.searching = true;
      this.requestApi = true;
      // 如果两次关键词相同，不调用接口，适用于已经输入关键词后的二次获取焦点
      if ( this.keyword === this.prevKeyword ) {
        return;
      }
      var vm = this;
      this.getItems(this.keyword)
        .then(function(items) {
          vm.requestApi = false;
          vm.items = items;
        })
        .catch(function(err) {
          vm.requestApi = false;
          console.error(err);
        });
    },
    removeTag(index) {
      this.value.splice(index, 1);
    },
    popTag: function() {
      if ( this.prevKeyword && !this.keyword ) {
        this.prevKeyword = '';
        return;
      }
      if ( !this.prevKeyword && !this.keyword ) {
        this.value.pop();
      }
    },
    select: function() {
      var item = this.items[this.currentIndex];
      if ( !this.inArray(item, this.value) ) {
        this.value.push(item);
      }
      this.keyword = '';
      this.currentIndex = 0;
      this.searching = false;
    },
    plusIndex: function() {
      this.currentIndex = (this.currentIndex + 1) % this.itemAmount;
    },
    minusIndex: function() {
      this.currentIndex = (this.currentIndex - 1 + this.itemAmount) % this.itemAmount;
    },
    selectItem(index) {
      this.currentIndex = index;
      this.select();
    },
    stopHandleInput: function() {
      var delay = 200;
      var vm = this;
      setTimeout(function() {
        vm.searching = false;
        if ( this.keyword === '' ) {
          vm.selectedItem = '';
        }
      }, delay);
    },
    showNoResult: function() {
      return this.keyword
        && !this.requestApi
        && this.items.length === 0;
    }
  }
});


